generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  firstName       String
  lastName        String
  profileImage    String         @default("https://storage-unirent.1tpp.dev/unirent/default-profile.svg")
  email           String         @unique
  customerId      String         @default("")
  verified        Boolean?       @default(false)
  password        String?
  role            String         @default("user")
  products        Product[]      @relation("userProducts")
  reviews         Review[]       @relation("userReviews")
  ResetToken      ResetToken[]   @relation("userResetToken")
  orders          Order[]        @relation("userOrders")
  coupons         Coupons[]      @relation("userCoupons")
  conversationIDs String[]       @db.ObjectId
  conversation    Conversation[] @relation(fields: [conversationIDs], references: [id])
  messages        Message[]      @relation("userMessages")

  @@map("users")
}

model Product {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  description    String
  imageName      String[]
  ownerId        String         @db.ObjectId
  owner          User           @relation("userProducts", fields: [ownerId], references: [id])
  reviews        Review[]       @relation("productReviews")
  rentalOptions  RentalOption[] @relation("productRentalOptions")
  specifications Specifications
  location       String
  availability   Boolean
  availableDays  AvailableDays
  orders         Order[]        @relation("orderProduct")
  totalRating Float  @default(0)

  @@map("products")
}

model RentalOption {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  productId String    @db.ObjectId
  product   Product   @relation("productRentalOptions", fields: [productId], references: [id])
  type      String
  priceRate Float
  order     Order[]   @relation("rentalOrder")

  // @@unique([productId, type], name: "UniqueRentalTypePerProduct")
  @@map("rental_options")
}

model Review {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  rating     Float
  reviewerId String  @db.ObjectId
  reviewer   User    @relation("userReviews", fields: [reviewerId], references: [id])
  productId  String  @db.ObjectId
  product    Product @relation("productReviews", fields: [productId], references: [id])

  @@map("reviews")
}

model ResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation("userResetToken", fields: [userId], references: [id])
  token     String
  timestamp DateTime

  @@map("reset_tokens")
}

type Specifications {
  brand       String
  model       String
  processor   String
  graphicCard String
  os          String
  ramSize     Int
  storageSize Int
}

type AvailableDays {
  startDate DateTime
  endDate   DateTime
}

model Order {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  productId     String       @db.ObjectId
  transactionId String       @default("") @unique
  product       Product      @relation("orderProduct", fields: [productId], references: [id])
  userId        String       @db.ObjectId
  user          User         @relation("userOrders", fields: [userId], references: [id])
  rentalId      String       @db.ObjectId
  rentalOption  RentalOption @relation("rentalOrder", fields: [rentalId], references: [id])
  amount        Float
  status        String       @default("waiting")
  rentTime      Int
  startRent     DateTime     @default(now())

  @@map("orders")
}

model Coupons {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  expireDate      DateTime
  code            String
  discount        Float
  amount          Int
  userAlreadyUsed String[] @db.ObjectId
  user            User     @relation("userCoupons", fields: [userAlreadyUsed], references: [id])

  @@map("coupons")
}

model Conversation {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  participants String[]  @db.ObjectId
  users        User[]    @relation(fields: [participants], references: [id])
  messages     Message[] @relation("conversationMessage")

  @@map("conversations")
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  conversation   Conversation @relation("conversationMessage", fields: [conversationId], references: [id])
  senderId       String       @db.ObjectId
  sender         User         @relation("userMessages", fields: [senderId], references: [id])
  text           String
  timestamp      DateTime     @default(now())
  seen           Boolean      @default(false)

  @@map("messages")
}